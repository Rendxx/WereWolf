{"version":3,"sources":["script.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controller.button.js","sourcesContent":["window.Rendxx = window.Rendxx || {};\r\nwindow.Rendxx.Game = window.Rendxx.Game || {};\r\nwindow.Rendxx.Game.Client = window.Rendxx.Game.Client || {};\r\nwindow.Rendxx.Game.Client.Controller = window.Rendxx.Game.Client.Controller || {};\r\n\r\n/*\r\n * Controller.Direction\r\n * This is a control handler for mobile. \r\n * User can move the handler in a circle or tap it.\r\n * Support only 1 touch point\r\n * \r\n * 2 callback:\r\n * Output the offset from center in 2 format (x,y / degree,strength)\r\n * onMove: \r\n * ({\r\n *      x: [int]            (0 - 100)\r\n *      y: [int]            (0 - 100)\r\n *      degree: [degree]    (-180 - 180, top is 0)\r\n *      strength: [int]     (0 - 100)\r\n * })\r\n * \r\n * onTap()\r\n */\r\n\r\n(function (Controller) {\r\n    \"use strict\";\r\n    var HTML = {\r\n        wrap: '<div class=\"controller-button\"></div>',\r\n        handler: '<div class=\"_handler\"></div>',\r\n        sensor: '<div class=\"_sensor\"></div>'\r\n    };\r\n\r\n    var CssClass = {\r\n        hover: '_hover'\r\n    };\r\n\r\n    var Env = {\r\n        triggerRatio: 0.5,          // ratio of handler trigger\r\n        tapThreshold: 0.1,          // threshold of tapping the handler\r\n        moveThreshold: 0.1          // any moving not pass this threshold will not be recognized\r\n    };\r\n\r\n    var Button = function (opts) {\r\n        // private property ---------------------------------------------\r\n        var that = this,\r\n            // parameters\r\n            _css = null,\r\n            _cssHandler = null,\r\n            // html\r\n            html_container = null,\r\n            html_wrap = null,\r\n            html_handler = null,\r\n            html_sensor = null,\r\n            // data\r\n            text = null,\r\n            identifier = null,\r\n            pressingFunc = null,\r\n            // flag\r\n            enabled = false,\r\n            using = false;\r\n\r\n        // callback ---------------------------------------------\r\n        this.onTap = null;\r\n        this.onPress = null;\r\n        this.onRelease = null;\r\n\r\n        // public function ---------------------------------------------\r\n        this.show = function (opts) {\r\n            if (opts != null) _setOpts(opts);\r\n            html_handler.removeClass(CssClass.hover);\r\n            html_wrap.attr('data-content', text);\r\n            html_wrap.show();\r\n\r\n            enabled = true;\r\n        };\r\n\r\n        this.hide = function () {\r\n            enabled = false;\r\n            html_wrap.hide();\r\n            using = false;\r\n        };\r\n\r\n        this.resize = function () {\r\n            if (_css !== null) html_wrap.css(_css);\r\n            html_handler.css({\r\n                'width': html_wrap.width() - 20,\r\n                'height': html_wrap.height() - 20,\r\n                'top': '10px',\r\n                'left': '10px'\r\n            });\r\n            if (_cssHandler !== null) html_handler.css(_cssHandler);\r\n        };\r\n\r\n        // private function ---------------------------------------------\r\n\r\n        // setup ---------------------------------------------\r\n        var _setupFunc = function () {\r\n            html_sensor[0].addEventListener('touchstart', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                if (identifier !== null) return;\r\n                var touch = event.changedTouches[0];\r\n                identifier = touch.identifier;\r\n                html_handler.addClass(CssClass.hover);\r\n                if (pressingFunc !== null) clearTimeout(pressingFunc);\r\n                pressingFunc = setTimeout(function () {\r\n                    pressingFunc = null;\r\n                    if (that.onPress) that.onPress();\r\n                }, 200);\r\n            }, false);\r\n\r\n            html_sensor[0].addEventListener('touchend', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                for (var i = 0; i < event.changedTouches.length; i++) {\r\n                    var touch = event.changedTouches[i];\r\n                    if (touch.identifier == identifier) {\r\n                        if (pressingFunc === null) {\r\n                            if (that.onRelease) that.onRelease();\r\n                        } else {\r\n                            clearTimeout(pressingFunc);\r\n                            pressingFunc = null;\r\n                            if (that.onTap) that.onTap();\r\n                        }\r\n                        html_handler.removeClass(CssClass.hover);\r\n                        identifier = null;\r\n                        using = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }, false);\r\n        };\r\n\r\n        var _setupHtml = function () {\r\n            // html\r\n            html_wrap = $(HTML.wrap).appendTo(html_container);\r\n            html_handler = $(HTML.handler).appendTo(html_wrap);\r\n            html_sensor = $(HTML.sensor).appendTo(html_wrap);\r\n            // css\r\n            that.resize();\r\n        };\r\n\r\n        var _setOpts = function (opts) {\r\n            if (opts.css) _css = opts.css;\r\n            if (opts.cssHandler) _cssHandler = opts.cssHandler;\r\n            if (opts.text) text = opts.text;\r\n        };\r\n\r\n        var _init = function (opts) {\r\n            if (opts == null) throw new Error(\"Option can not be empty\");\r\n            html_container = opts.container;\r\n            _setOpts(opts);\r\n            _setupHtml();\r\n            _setupFunc();\r\n            that.hide();\r\n        };\r\n        _init(opts);\r\n    };\r\n    Controller.Button = Button;\r\n    Controller.Button.Env = Env;\r\n})(window.Rendxx.Game.Client.Controller);"],"sourceRoot":"/source/"}